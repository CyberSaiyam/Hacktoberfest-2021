#include <stdio.h>

#define MAXIMO_DE_DIAS 50

#define MAX(A,B) ((A > B) ? (A) : (B))

int analisar(int *lucros, int quantidadeDeDias, int custoPorDia);

int main (void) {
  int DIAS, CUSTO_POR_DIA;

  while (scanf("%d %d\n", &DIAS, &CUSTO_POR_DIA) != EOF) {
    int LUCROS[MAXIMO_DE_DIAS];
    int i;

    for (i = 0; i < DIAS; i++) {
      scanf("%d\n", LUCROS + i);
    }

    printf("%d\n", analisar(LUCROS, DIAS, CUSTO_POR_DIA));
  }

  return 0;
}

int analisar(int *lucros, int quantidadeDeDias, int custoPorDia) {
  int maximo = 0;
  int maximoAteAqui = 0;
  int dia;

  for (dia = 0; dia < quantidadeDeDias; dia++) {
    int lucro = lucros[dia] - custoPorDia;

    maximoAteAqui = MAX(0, maximoAteAqui + lucro);
    maximo = MAX(maximo, maximoAteAqui);
  }

  return maximo;
}
URI - 1487(c)
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct brinquedo{
  unsigned short tempo;
  unsigned short qtsPontos;
  double razaoPontoTempo;
} brinquedo;

int compara(brinquedo *a, brinquedo *b);

void main (){
  unsigned short i;
  unsigned short instancia;
  unsigned short qtsAtracoes;
  unsigned short limiteTempo, aux;
  unsigned short pontoTotal, tempoTotal;

  instancia = 0;
  while (true){
    scanf("%hu %hu", &qtsAtracoes, &limiteTempo);

    if (qtsAtracoes == 0)
        break;

    brinquedo brinquedos[qtsAtracoes];

    for (i = 0; i < qtsAtracoes; ++i){
      scanf("%hu %hu", &brinquedos[i].tempo, &brinquedos[i].qtsPontos);
      brinquedos[i].razaoPontoTempo = (brinquedos[i].qtsPontos / (double)brinquedos[i].tempo);
    }
    qsort(brinquedos, qtsAtracoes, sizeof(brinquedo), compara);

    i = 0;
    pontoTotal = tempoTotal = 0;

    while (i < qtsAtracoes){
      aux = tempoTotal + brinquedos[i].tempo;
      if (aux <= limiteTempo){
        pontoTotal += brinquedos[i].qtsPontos;
        tempoTotal = aux;
      }
      else
        i++;
    }
    printf("Instancia %hu\n%hu\n\n", ++instancia, pontoTotal);
  }
}
int compara(brinquedo *a, brinquedo *b){
  if (a->razaoPontoTempo == b->razaoPontoTempo)
    return 0;
  else if (a->razaoPontoTempo > b->razaoPontoTempo)
    return -1;
  else
    return 1;
}
